struct I80 {
    // human readable abbreviation of instruction
    mnemonic: &'static str,
    // size of the instruction in bytes
    size: usize,
}

const INSTRUCTIONS: [I80; 256] = [
    I80{mnemonic: "nop", size: 1},
    I80{mnemonic: "lxi\tb, ", size: 3},
    I80{mnemonic: "stax\tb", size: 1},
    I80{mnemonic: "inx\tb", size: 1},
    I80{mnemonic: "inr\tb", size: 1},
    I80{mnemonic: "dcr\tb", size: 1},
    I80{mnemonic: "mvi\tb, ", size: 2},
    I80{mnemonic: "rlc", size: 1},
    I80{mnemonic: "nop", size: 1},
    I80{mnemonic: "dad", size: 1},
    I80{mnemonic: "ldax\tb", size: 1},
    I80{mnemonic: "dcx\tb", size: 1},
    I80{mnemonic: "inr\tc", size: 1},
    I80{mnemonic: "dcr\tc", size: 1},
    I80{mnemonic: "mvi\tc, ", size: 2},
    I80{mnemonic: "rrc", size: 1},
    I80{mnemonic: "nop", size: 1},
    I80{mnemonic: "lxi\td, ", size: 3},
    I80{mnemonic: "stax\td", size: 1},
    I80{mnemonic: "inx\td", size: 1},
    I80{mnemonic: "inr\td", size: 1},
    I80{mnemonic: "dcr\td", size: 1},
    I80{mnemonic: "mvi\td, ", size: 2},
    I80{mnemonic: "ral", size: 1},
    I80{mnemonic: "nop", size: 1},
    I80{mnemonic: "dad\td", size: 1},
    I80{mnemonic: "ldax\td", size: 1},
    I80{mnemonic: "dcx\td", size: 1},
    I80{mnemonic: "inr\te", size: 1},
    I80{mnemonic: "dcr\te", size: 1},
    I80{mnemonic: "mvi\te, ", size: 2},
    I80{mnemonic: "rar", size: 1},
    I80{mnemonic: "nop", size: 1},
    I80{mnemonic: "lxi\th, ", size: 3},
    I80{mnemonic: "shld\t", size: 3},
    I80{mnemonic: "inx\th", size: 1},
    I80{mnemonic: "inr\th", size: 1},
    I80{mnemonic: "dcr\th", size: 1},
    I80{mnemonic: "mvi\th, ", size: 2},
    I80{mnemonic: "daa", size: 1},
    I80{mnemonic: "nop", size: 1},
    I80{mnemonic: "dad\th", size: 1},
    I80{mnemonic: "lhld\t", size: 3},
    I80{mnemonic: "dcx\th", size: 1},
    I80{mnemonic: "inr\tl", size: 1},
    I80{mnemonic: "dcr\tl", size: 1},
    I80{mnemonic: "mvi\tl, ", size: 2},
    I80{mnemonic: "cma", size: 1},
    I80{mnemonic: "nop", size: 1},
    I80{mnemonic: "lxi\tsp, ", size: 3},
    I80{mnemonic: "sta\t", size: 3},
    I80{mnemonic: "inx\tsp", size: 1},
    I80{mnemonic: "inr\tm", size: 1},
    I80{mnemonic: "dcr\tm", size: 1},
    I80{mnemonic: "mvi\tm, ", size: 2},
    I80{mnemonic: "stc", size: 1},
    I80{mnemonic: "nop", size: 1},
    I80{mnemonic: "dad\tsp", size: 1},
    I80{mnemonic: "lda\t", size: 3},
    I80{mnemonic: "dcx\tsp", size: 1},
    I80{mnemonic: "inr\ta", size: 1},
    I80{mnemonic: "dcr\ta", size: 1},
    I80{mnemonic: "mvi\ta, ", size: 2},
    I80{mnemonic: "cmc", size: 1},
    I80{mnemonic: "mov\tb, b", size: 1},
    I80{mnemonic: "mov\tb, c", size: 1},
    I80{mnemonic: "mov\tb, d", size: 1},
    I80{mnemonic: "mov\tb, e", size: 1},
    I80{mnemonic: "mov\tb, h", size: 1},
    I80{mnemonic: "mov\tb, l", size: 1},
    I80{mnemonic: "mov\tb, m", size: 1},
    I80{mnemonic: "mov\tb, a", size: 1},
    I80{mnemonic: "mov\tc, b", size: 1},
    I80{mnemonic: "mov\tc, c", size: 1},
    I80{mnemonic: "mov\tc, d", size: 1},
    I80{mnemonic: "mov\tc, e", size: 1},
    I80{mnemonic: "mov\tc, h", size: 1},
    I80{mnemonic: "mov\tc, l", size: 1},
    I80{mnemonic: "mov\tc, m", size: 1},
    I80{mnemonic: "mov\tc, a", size: 1},
    I80{mnemonic: "mov\td, b", size: 1},
    I80{mnemonic: "mov\td, c", size: 1},
    I80{mnemonic: "mov\td, d", size: 1},
    I80{mnemonic: "mov\td, e", size: 1},
    I80{mnemonic: "mov\td, h", size: 1},
    I80{mnemonic: "mov\td, l", size: 1},
    I80{mnemonic: "mov\td, m", size: 1},
    I80{mnemonic: "mov\td, a", size: 1},
    I80{mnemonic: "mov\te, b", size: 1},
    I80{mnemonic: "mov\te, c", size: 1},
    I80{mnemonic: "mov\te, d", size: 1},
    I80{mnemonic: "mov\te, e", size: 1},
    I80{mnemonic: "mov\te, h", size: 1},
    I80{mnemonic: "mov\te, l", size: 1},
    I80{mnemonic: "mov\te, m", size: 1},
    I80{mnemonic: "mov\te, a", size: 1},
    I80{mnemonic: "mov\th, b", size: 1},
    I80{mnemonic: "mov\th, c", size: 1},
    I80{mnemonic: "mov\th, d", size: 1},
    I80{mnemonic: "mov\th, e", size: 1},
    I80{mnemonic: "mov\th, h", size: 1},
    I80{mnemonic: "mov\th, l", size: 1},
    I80{mnemonic: "mov\th, m", size: 1},
    I80{mnemonic: "mov\th, a", size: 1},
    I80{mnemonic: "mov\tl, b", size: 1},
    I80{mnemonic: "mov\tl, c", size: 1},
    I80{mnemonic: "mov\tl, d", size: 1},
    I80{mnemonic: "mov\tl, e", size: 1},
    I80{mnemonic: "mov\tl, h", size: 1},
    I80{mnemonic: "mov\tl, l", size: 1},
    I80{mnemonic: "mov\tl, m", size: 1},
    I80{mnemonic: "mov\tl, a", size: 1},
    I80{mnemonic: "mov\tm, b", size: 1},
    I80{mnemonic: "mov\tm, c", size: 1},
    I80{mnemonic: "mov\tm, d", size: 1},
    I80{mnemonic: "mov\tm, e", size: 1},
    I80{mnemonic: "mov\tm, h", size: 1},
    I80{mnemonic: "mov\tm, l", size: 1},
    I80{mnemonic: "hlt", size: 1},
    I80{mnemonic: "mov\tm, a", size: 1},
    I80{mnemonic: "mov\ta, b", size: 1},
    I80{mnemonic: "mov\ta, c", size: 1},
    I80{mnemonic: "mov\ta, d", size: 1},
    I80{mnemonic: "mov\ta, e", size: 1},
    I80{mnemonic: "mov\ta, h", size: 1},
    I80{mnemonic: "mov\ta, l", size: 1},
    I80{mnemonic: "mov\ta, m", size: 1},
    I80{mnemonic: "mov\ta, a", size: 1},
    I80{mnemonic: "add\tb", size: 1},
    I80{mnemonic: "add\tc", size: 1},
    I80{mnemonic: "add\td", size: 1},
    I80{mnemonic: "add\te", size: 1},
    I80{mnemonic: "add\th", size: 1},
    I80{mnemonic: "add\tl", size: 1},
    I80{mnemonic: "add\tm", size: 1},
    I80{mnemonic: "add\ta", size: 1},
    I80{mnemonic: "adc\tb", size: 1},
    I80{mnemonic: "adc\tc", size: 1},
    I80{mnemonic: "adc\td", size: 1},
    I80{mnemonic: "adc\te", size: 1},
    I80{mnemonic: "adc\th", size: 1},
    I80{mnemonic: "adc\tl", size: 1},
    I80{mnemonic: "adc\tm", size: 1},
    I80{mnemonic: "adc\ta", size: 1},
    I80{mnemonic: "sub\tb", size: 1},
    I80{mnemonic: "sub\tc", size: 1},
    I80{mnemonic: "sub\td", size: 1},
    I80{mnemonic: "sub\te", size: 1},
    I80{mnemonic: "sub\th", size: 1},
    I80{mnemonic: "sub\tl", size: 1},
    I80{mnemonic: "sub\tm", size: 1},
    I80{mnemonic: "sub\ta", size: 1},
    I80{mnemonic: "sbb\tb", size: 1},
    I80{mnemonic: "sbb\tc", size: 1},
    I80{mnemonic: "sbb\td", size: 1},
    I80{mnemonic: "sbb\te", size: 1},
    I80{mnemonic: "sbb\th", size: 1},
    I80{mnemonic: "sbb\tl", size: 1},
    I80{mnemonic: "sbb\tm", size: 1},
    I80{mnemonic: "sbb\ta", size: 1},
    I80{mnemonic: "ana\tb", size: 1},
    I80{mnemonic: "ana\tc", size: 1},
    I80{mnemonic: "ana\td", size: 1},
    I80{mnemonic: "ana\te", size: 1},
    I80{mnemonic: "ana\th", size: 1},
    I80{mnemonic: "ana\tl", size: 1},
    I80{mnemonic: "ana\tm", size: 1},
    I80{mnemonic: "ana\ta", size: 1},
    I80{mnemonic: "xra\tb", size: 1},
    I80{mnemonic: "xra\tc", size: 1},
    I80{mnemonic: "xra\td", size: 1},
    I80{mnemonic: "xra\te", size: 1},
    I80{mnemonic: "xra\th", size: 1},
    I80{mnemonic: "xra\tl", size: 1},
    I80{mnemonic: "xra\tm", size: 1},
    I80{mnemonic: "xra\ta", size: 1},
    I80{mnemonic: "ora\tb", size: 1},
    I80{mnemonic: "ora\tc", size: 1},
    I80{mnemonic: "ora\td", size: 1},
    I80{mnemonic: "ora\te", size: 1},
    I80{mnemonic: "ora\th", size: 1},
    I80{mnemonic: "ora\tl", size: 1},
    I80{mnemonic: "ora\tm", size: 1},
    I80{mnemonic: "ora\ta", size: 1},
    I80{mnemonic: "cmp\tb", size: 1},
    I80{mnemonic: "cmp\tc", size: 1},
    I80{mnemonic: "cmp\td", size: 1},
    I80{mnemonic: "cmp\te", size: 1},
    I80{mnemonic: "cmp\th", size: 1},
    I80{mnemonic: "cmp\tl", size: 1},
    I80{mnemonic: "cmp\tm", size: 1},
    I80{mnemonic: "cmp\ta", size: 1},
    I80{mnemonic: "rnz", size: 1},
    I80{mnemonic: "pop\tb", size: 1},
    I80{mnemonic: "jnz\t", size: 3},
    I80{mnemonic: "jmp\t", size: 3},
    I80{mnemonic: "cnz\t", size: 3},
    I80{mnemonic: "push\tb", size: 1},
    I80{mnemonic: "adi\t", size: 2},
    I80{mnemonic: "rst\t0", size: 1},
    I80{mnemonic: "rz", size: 1},
    I80{mnemonic: "ret", size: 1},
    I80{mnemonic: "jz\t", size: 3},
    I80{mnemonic: "jmp\t", size: 3},
    I80{mnemonic: "cz\t", size: 3},
    I80{mnemonic: "call\t", size: 3},
    I80{mnemonic: "aci\t", size: 2},
    I80{mnemonic: "rst\t1", size: 1},
    I80{mnemonic: "rnc", size: 1},
    I80{mnemonic: "pop\td", size: 1},
    I80{mnemonic: "jnc\t", size: 3},
    I80{mnemonic: "out\t", size: 2},
    I80{mnemonic: "cnc\t", size: 3},
    I80{mnemonic: "push\td", size: 1},
    I80{mnemonic: "sui\t", size: 2},
    I80{mnemonic: "rst\t2", size: 1},
    I80{mnemonic: "rc", size: 1},
    I80{mnemonic: "ret", size: 1},
    I80{mnemonic: "jc\t", size: 3},
    I80{mnemonic: "in\t", size: 2},
    I80{mnemonic: "cc\t", size: 3},
    I80{mnemonic: "call\t", size: 3},
    I80{mnemonic: "sbi\t", size: 2},
    I80{mnemonic: "rst\t3", size: 1},
    I80{mnemonic: "rpo", size: 1},
    I80{mnemonic: "pop\th", size: 1},
    I80{mnemonic: "jpo\t", size: 3},
    I80{mnemonic: "xthl", size: 1},
    I80{mnemonic: "cpo\t", size: 3},
    I80{mnemonic: "push\th", size: 1},
    I80{mnemonic: "ani\t", size: 2},
    I80{mnemonic: "rst\t4", size: 1},
    I80{mnemonic: "rpe", size: 1},
    I80{mnemonic: "pchl", size: 1},
    I80{mnemonic: "jpe\t", size: 3},
    I80{mnemonic: "xchg", size: 1},
    I80{mnemonic: "cpe\t", size: 3},
    I80{mnemonic: "call\t", size: 3},
    I80{mnemonic: "xri\t", size: 2},
    I80{mnemonic: "rst\t5", size: 1},
    I80{mnemonic: "rp", size: 1},
    I80{mnemonic: "pop\tpsw", size: 1},
    I80{mnemonic: "jp\t", size: 3},
    I80{mnemonic: "di", size: 1},
    I80{mnemonic: "cp\t", size: 3},
    I80{mnemonic: "push\tpsw", size: 1},
    I80{mnemonic: "ori\t", size: 2},
    I80{mnemonic: "rst\t6", size: 1},
    I80{mnemonic: "rm", size: 1},
    I80{mnemonic: "sphl", size: 1},
    I80{mnemonic: "jm\t", size: 3},
    I80{mnemonic: "ei", size: 1},
    I80{mnemonic: "cm\t", size: 3},
    I80{mnemonic: "call\t", size: 3},
    I80{mnemonic: "cpi\t", size: 2},
    I80{mnemonic: "rst\t7", size: 1},
];

fn main() {
    let args: Vec<String> = std::env::args().collect();
    if args.len() != 2 {
        eprintln!("Usage: intel8080disassembler file.com");
        std::process::exit(1);
    }
    let mut file = std::fs::File::open(args[1].clone()).expect("Cannot open file!");
    let (mut program, mut address) = (Vec::new(), 0); // 64KB max size for Z80 program so fine to load all in memory
    std::io::Read::read_to_end(&mut file, &mut program).expect("Cannot read file!");
    while address < program.len() {
        let instruction = &INSTRUCTIONS[program[address] as usize];
        print!("{address:04x}\t{}", instruction.mnemonic);
        if instruction.size > 1 {
            if instruction.size == 3 {
                print!("{:02x}", program[address + 2]); // print 3rd byte before 2nd byte to make it big endian
            }
            print!("{:02x}h", program[address + 1]); // add h to the end to remind us it is hexadecimal
        }
        println!();
        address += instruction.size;
    }
}
